// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "06/25/2019 12:34:57"

// 
// Device: Altera EP2C5T144C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module freqmod60 (
	clk,
	divider_clock);
input 	clk;
output 	divider_clock;

// Design Ports Information
// divider_clock	=>  Location: PIN_75,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: 24mA
// clk	=>  Location: PIN_17,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \clk~combout ;
wire \clk~clkctrl_outclk ;
wire \q[2]~2_combout ;
wire \q[1]~0_combout ;
wire \q[0]~1_combout ;
wire \divider_clock~0_combout ;
wire \divider_clock~reg0_regout ;
wire [2:0] q;


// Location: PIN_17,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: Default
cycloneii_io \clk~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\clk~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(clk));
// synopsys translate_off
defparam \clk~I .input_async_reset = "none";
defparam \clk~I .input_power_up = "low";
defparam \clk~I .input_register_mode = "none";
defparam \clk~I .input_sync_reset = "none";
defparam \clk~I .oe_async_reset = "none";
defparam \clk~I .oe_power_up = "low";
defparam \clk~I .oe_register_mode = "none";
defparam \clk~I .oe_sync_reset = "none";
defparam \clk~I .operation_mode = "input";
defparam \clk~I .output_async_reset = "none";
defparam \clk~I .output_power_up = "low";
defparam \clk~I .output_register_mode = "none";
defparam \clk~I .output_sync_reset = "none";
// synopsys translate_on

// Location: CLKCTRL_G2
cycloneii_clkctrl \clk~clkctrl (
	.ena(vcc),
	.inclk({gnd,gnd,gnd,\clk~combout }),
	.clkselect(2'b00),
	.devclrn(devclrn),
	.devpor(devpor),
	.outclk(\clk~clkctrl_outclk ));
// synopsys translate_off
defparam \clk~clkctrl .clock_type = "global clock";
defparam \clk~clkctrl .ena_register_mode = "none";
// synopsys translate_on

// Location: LCCOMB_X27_Y2_N10
cycloneii_lcell_comb \q[2]~2 (
// Equation(s):
// \q[2]~2_combout  = (q[0] & ((q[2] & (\divider_clock~reg0_regout  & !q[1])) # (!q[2] & ((q[1]))))) # (!q[0] & (((q[2]))))

	.dataa(\divider_clock~reg0_regout ),
	.datab(q[0]),
	.datac(q[2]),
	.datad(q[1]),
	.cin(gnd),
	.combout(\q[2]~2_combout ),
	.cout());
// synopsys translate_off
defparam \q[2]~2 .lut_mask = 16'h3CB0;
defparam \q[2]~2 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCFF_X27_Y2_N11
cycloneii_lcell_ff \q[2] (
	.clk(\clk~clkctrl_outclk ),
	.datain(\q[2]~2_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(q[2]));

// Location: LCCOMB_X27_Y2_N30
cycloneii_lcell_comb \q[1]~0 (
// Equation(s):
// \q[1]~0_combout  = (q[0] & (!q[1] & !q[2])) # (!q[0] & (q[1]))

	.dataa(vcc),
	.datab(q[0]),
	.datac(q[1]),
	.datad(q[2]),
	.cin(gnd),
	.combout(\q[1]~0_combout ),
	.cout());
// synopsys translate_off
defparam \q[1]~0 .lut_mask = 16'h303C;
defparam \q[1]~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCFF_X27_Y2_N31
cycloneii_lcell_ff \q[1] (
	.clk(\clk~clkctrl_outclk ),
	.datain(\q[1]~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(q[1]));

// Location: LCCOMB_X27_Y2_N28
cycloneii_lcell_comb \q[0]~1 (
// Equation(s):
// \q[0]~1_combout  = ((q[2] & (!q[1] & \divider_clock~reg0_regout ))) # (!q[0])

	.dataa(q[2]),
	.datab(q[1]),
	.datac(q[0]),
	.datad(\divider_clock~reg0_regout ),
	.cin(gnd),
	.combout(\q[0]~1_combout ),
	.cout());
// synopsys translate_off
defparam \q[0]~1 .lut_mask = 16'h2F0F;
defparam \q[0]~1 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCFF_X27_Y2_N29
cycloneii_lcell_ff \q[0] (
	.clk(\clk~clkctrl_outclk ),
	.datain(\q[0]~1_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(q[0]));

// Location: LCCOMB_X27_Y2_N12
cycloneii_lcell_comb \divider_clock~0 (
// Equation(s):
// \divider_clock~0_combout  = \divider_clock~reg0_regout  $ (((q[2] & (q[0] & !q[1]))))

	.dataa(q[2]),
	.datab(q[0]),
	.datac(\divider_clock~reg0_regout ),
	.datad(q[1]),
	.cin(gnd),
	.combout(\divider_clock~0_combout ),
	.cout());
// synopsys translate_off
defparam \divider_clock~0 .lut_mask = 16'hF078;
defparam \divider_clock~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCFF_X27_Y2_N13
cycloneii_lcell_ff \divider_clock~reg0 (
	.clk(\clk~clkctrl_outclk ),
	.datain(\divider_clock~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\divider_clock~reg0_regout ));

// Location: PIN_75,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: 24mA
cycloneii_io \divider_clock~I (
	.datain(\divider_clock~reg0_regout ),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(divider_clock));
// synopsys translate_off
defparam \divider_clock~I .input_async_reset = "none";
defparam \divider_clock~I .input_power_up = "low";
defparam \divider_clock~I .input_register_mode = "none";
defparam \divider_clock~I .input_sync_reset = "none";
defparam \divider_clock~I .oe_async_reset = "none";
defparam \divider_clock~I .oe_power_up = "low";
defparam \divider_clock~I .oe_register_mode = "none";
defparam \divider_clock~I .oe_sync_reset = "none";
defparam \divider_clock~I .operation_mode = "output";
defparam \divider_clock~I .output_async_reset = "none";
defparam \divider_clock~I .output_power_up = "low";
defparam \divider_clock~I .output_register_mode = "none";
defparam \divider_clock~I .output_sync_reset = "none";
// synopsys translate_on

endmodule
